---
title: "Methods 3 - Assignment 1"
author: "Esteban David Maidana"
date: "09/02/2022"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

## Required Packages 
## install.packages("rethinking") ##Installed
## install.packages("slider") ##Installed
## install.packages("plotly") ##Installed
## install.packages("dplyr") ##Installed
## install.packages("ggplot2") ##Installed
## install.packages("skimr") ##Installed

## Required libraries
library(rethinking) ##Loaded
library(tidyverse) ##Loaded
library(dplyr) ##Loaded
library(ggplot2) ##Loaded
library(skimr) ##Loaded
library(lme4) ##Loaded
library(data.table) ##Loaded
library(nlme) ##Loaded

## LOAD DATA
## Get working directory
setwd('/Users/estebandavidmaidana/Desktop')
working_directory = getwd()
```
## Assignment 1: Using mixed effects modelling to model hierarchical data (Winter & Grawunder, 2012). 

In this assignment we will be investigating the _politeness_ dataset of Winter and Grawunder (2012) and apply basic methods of multilevel modelling. 

## Dataset

The dataset has been shared on GitHub, so make sure that the csv-file is on your current path. Otherwise you can supply the full path.
```{r}
## LOAD DATA
## Get working directory
setwd('/Users/estebandavidmaidana/Desktop')
working_directory = getwd()

## Load data from csv file
file = paste(working_directory, sep = "", "/working_directory/politeness.csv")
politeness <- read.csv(file) ## Read in data
```
## Exercises and objectives:

The objectives of the exercises of this assignment are:  
1) Learning to recognize hierarchical structures within datasets and describing them  
2) Creating simple multilevel models and assessing their fitness  
3) Write up a report about the findings of the study  

## REMEMBER: In your report, make sure to include code that can reproduce the answers requested in the exercises below.  

## REMEMBER: This assignment will be part of your final portfolio.

## Exercise 1: Describing the dataset and making some initial plots.

1) Describe the dataset, such that someone who happened upon this dataset could understand the variables and what they contain  
i. Also consider whether any of the variables in _politeness_ should be encoded as factors or have the factor encoding removed. Hint: ```?factor```
```{r}
## View contents of the defined object via the view function.
view(politeness)

## Access a broad overview of the defined object.
skim(politeness)

## Answer: Defaults to encoding subject, gender, attitude as characters and the rest as numeric. We should encode subject, gender, scenario, and attitude as factors. 

politeness[1:4] = lapply(politeness[1:4], factor)

## Answer: There are several variables here. Subject appears to be an ID variable for each subject, gender is M or F, scenario presumably refers to different testing conditions, and attitude seems to have the options polite or informal. Duration is duration in some..###(DOUBLE CHECK)!!! unit, the others are unclear.
```

2) Create a new data frame that just contains the subject _F1_ and run two linear models; one that expresses _f0mn_ as dependent on _scenario_ as an integer; and one that expresses _f0mn_ as dependent on _scenario_ encoded as a factor  
    i. Include the model matrices, $X$ from the General Linear Model, for these two models in your report and describe the different interpretations of _scenario_ that these entail
    ii. Which coding of _scenario_, as a factor or not, is more fitting? You want to code it as a factor, presumably, since it's a category of scenario. 
```{r}
## Creating new data frame that has just the subject F1.
politeness_f1 <- politeness %>%
  filter(subject == 'F1')

## Factor version of linear model.
f1lm_factor <- lm(f0mn~factor(scenario),data = politeness_f1)
f1lm_int <- lm(f0mn~as.integer(scenario),data = politeness_f1)

## Model matrices.
fact_matrix <- model.matrix(f1lm_factor)
int_matrix <- model.matrix(f1lm_int)

## Answer: We can see one was just treated as a set of integers while the factor was broken into a bunch of dummy variables.
```
3) Make a plot that includes a subplot for each subject that has _scenario_ on the x-axis and _f0mn_ on the y-axis and where points are colour coded according to _attitude_
    i. Describe the differences between subjects
```{r}
## Plot
ggplot(drop_na(politeness), aes(as.integer(scenario), f0mn, color = attitude))+
  geom_point()+
  geom_line()+
  labs(x='Scenario', y = 'f0mn')+
  facet_wrap(~subject)

# ggplot(drop_na(politeness), aes(as.integer(scenario), f0mn, color = attitude))+
#   geom_point()+
#   geom_smooth(method = 'lm', se = F)+
#   labs(x='Scenario', y = 'f0mn')

## Answer: Differences between subjects?
```
## Exercise 2: Comparison of models.

For this part, make sure to have `lme4` installed.  
You can install it using `install.packages("lme4")` and load it using `library(lme4)`  
`lmer` is used for multilevel modelling
```{r, eval=FALSE}
library(lme4) ##Loaded

mixed.model <- lmer(formula=..., data=...)
example.formula <- formula(dep.variable ~ first.level.variable + (1 | second.level.variable))
```
1) Build four models and do some comparisons
    i. a single level model that models _f0mn_ as dependent on _gender_
```{r}
## Single level model.
single <- lmer(f0mn ~ (1|gender), data = politeness)
```
    ii. a two-level model that adds a second level on top of i. where unique intercepts are modelled for each _scenario_
```{r}
## Two-level model that models intercepts for _scenario_.
scenario_twolvl <- lmer(f0mn ~ gender + (1|scenario), data = politeness)
```
    iii. a two-level model that only has _subject_ as an intercept 
```{r}
## Two-level model that only has _subject_ as an intercept.
subject_twolvl <- lmer(f0mn ~ gender + (1|subject), data = politeness)
```
    iv. a two-level model that models intercepts for both _scenario_ and _subject_
```{r}
## Two-level model that models intercepts for both _subject_ and _scenario_.
both_twolvl <- lmer(f0mn ~ gender + (1|subject) + (1|scenario), data = politeness)
```
    v. which of the models has the lowest residual standard deviation, also compare the Akaike Information Criterion `AIC`?
```{r}
## Answer: Lowest residual standard deviation is the one that includes  both _subject_ and _scenario_. 

## Akaike Information Criterion 'AIC'
AIC(single)
AIC(scenario_twolvl)
AIC(subject_twolvl)
AIC(both_twolvl)

## Answer: Lowest is the one that includes both.

## Comment: stepAIC function would go through all the variables stepwise and add/remove them from a model to find the optimal model.
```
    vi. which of the second-level effects explains the most variance?
## Answer: 

2) Why is our single-level model bad?
    i. create a new data frame that has three variables, _subject_, _gender_ and _f0mn_, where _f0mn_ is the average of all responses of each subject, i.e. averaging across _attitude_ and_scenario_
```{r}
## New data frame. 
subgen_politeness <- politeness %>%
  group_by(subject, gender) %>%
  summarize(f0mn = mean(f0mn, na.rm = TRUE))

subgen_politeness
```
    ii. build a single-level model that models _f0mn_ as dependent on _gender_ using this new dataset
```{r}
## Single-level model.
single_summary <-lmer(f0mn ~ (1|gender), data = subgen_politeness)
```
    iii. make Quantile-Quantile plots, comparing theoretical quantiles to the sample quantiles) using `qqnorm` and `qqline` for the new single-level model and compare it to the old single-level model (from 1).i). Which model's residuals ($\epsilon$) fulfil the assumptions of the General Linear Model better?)
    
## General linear model assumptions:
## - The data are independently distributed.
## - The dependent variable does not need to be normally distrubuted, but it needs to follow some kind of exponential distribution (binomial, poisson, multinomial, normal...).
```{r}
## QQ plot of our new lmer model
qqnorm(resid(single_summary))
qqline(resid(single_summary))

## QQ plot of our old lmer model.
qqnorm(resid(single))
qqline(resid(single))

## QQ plots of our data sets. 
qqnorm(subgen_politeness$f0mn)
qqline(subgen_politeness$f0mn)

qqnorm(politeness$f0mn)
qqline(politeness$f0mn)
```
    iv. Also make a quantile-quantile plot for the residuals of the  multilevel model with two intercepts. Does it look alright?
```{r}
## QQ plot
qqnorm(resid(both_twolvl))
qqline(resid(both_twolvl))
```
3) Plotting the two-intercepts model
    i. Create a plot for each subject, (similar to part 3 in Exercise 1), this time also indicating the fitted value for each of the subjects for each of the scenarios (hint use `fixef` to get the "grand effects" for each gender and `ranef` to get the subject- and scenario-specific effects)
```{r}
fixef(both_twolvl)
ranef(both_twolvl)

## First I made a dataframe containing the value contributed by the subject.
test <- data.frame(subj_int = ranef(both_twolvl)[1])
rownames(test)

test2 <- data.frame(test, subject = rownames(test)) 

## Here I added a gender column from the subject names (there are lots of better ways to do this).
test2$gender = "M"
for (i in 1:nrow(test2)) {
  if ("F1" %in% test2$subject[i] |"F2" %in% test2$subject[i] |"F3" %in% test2$subject[i] |"F4" %in% test2$subject[i] |"F5" %in% test2$subject[i] |"F6" %in% test2$subject[i] |"F7" %in% test2$subject[i] |"F8" %in% test2$subject[i] |"F9" %in% test2$subject[i]) {
    test2$gender[i] = "F"
  }
}

## Renaming to subgender (for subject and gender).
subgender <- test2

## Repeating. This time making a dataframe by scenario.
test <- data.frame(ranef(both_twolvl)[2])

test2 <- data.frame(test, scenario = rownames(test)) 
test2 <- rename(test2, scenario.int = X.Intercept.)


## Here I'm making a for loop where it spits out a dataframe with repeats of the scenarios, each with a different subject name next to it.
test3 <- test2
test3$subject = NA
test4 = test3[0,1:3]
for (i in 1:nrow(subgender)) {
  test3$subject = subgender$subject[i]
  test4 = rbind(test4, test3)
}

scenarios = test4

## This allowed me to right join them, by subject. 
combined <-right_join(subgender,scenarios, by = 'subject')
combined <- rename(combined,subj.int = X.Intercept.)

## Finally, took the combined dataset, and created a gender integer column based off of the fixed effects of gender.
full <- combined %>%
  mutate(gender.int = ifelse(gender == "F", 246.7650, 131.5904)) %>%
  mutate(predicted = subj.int + gender.int + scenario.int)

ggplot(full, aes(scenario, predicted))+
  geom_point()+
  labs(y = 'predicted f0mn')+
  facet_wrap(~subject)
```
## Exercise 3: Now with attitude.

1) Carry on with the model with the two unique intercepts fitted (_scenario_ and _subject_).
    i. now build a model that has _attitude_ as a main effect besides _gender_
```{r}

```
    ii. make a separate model that besides the main effects of _attitude_ and _gender_ also include their interaction
```{r}

```
    iii. describe what the interaction term in the model says about Korean men's pitch when they are polite relative to Korean women's pitch when they are polite (you don't have to judge whether it is interesting) 
    
## Answer

2) Compare the three models (1. gender as a main effect; 2. gender and attitude as main effects; 3. gender and attitude as main effects and the interaction between them. For all three models model unique intercepts for _subject_ and _scenario_) using residual variance, residual standard deviation and AIC. 
```{r}

```
3)  Choose the model that you think describe the data the best - and write a short report on the main findings based on this model. At least include the following:
  i. describe what the dataset consists of  
  ii. what can you conclude about the effect of gender and attitude on pitch (if anything)?  
  iii. motivate why you would include separate intercepts for subjects and scenarios (if you think they should be included)  
  iv. describe the variance components of the second level (if any)  
  v. include a Quantile-Quantile plot of your chosen model  
